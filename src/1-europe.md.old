---
theme: dashboard
title: Europe
toc: false
sql:
  allData: ./data/detailaq2a_eur.parquet
  data_geo: ./data/liste_geo.parquet
  data_annee: ./data/liste_annee.parquet
  data_espece: ./data/liste_espece.parquet
---

```js
import {extractColumns} from "./components/extractColumns.js";
```

```js
const list_code_geo_dans_data = await sql`SELECT DISTINCT geo FROM allData`;
const list_code_espece_dans_data = await sql`SELECT DISTINCT species FROM allData`;
const list_geo = await sql`SELECT DISTINCT CODE, "Label - French" FROM data_geo`;
const list_espece = await sql`SELECT DISTINCT CODE, "Label - French" FROM data_espece`;
const list_annee = await sql`SELECT DISTINCT TIME_PERIOD FROM data_annee`;
```

```js
const data_europe_complet = await sql([`SELECT sum(OBS_VALUE) as tot, unit
                                FROM allData
                                WHERE species = '${[choix_list_espece.value]}'
                                  AND geo = '${[choix_list_geo.value]}'
                                  AND TIME_PERIOD = ${[choix_list_annee]}
                                  AND aquaenv = 'TOTAL'
                                  AND fishreg = '0'
                                  AND aquameth = 'TOTAL'
                                GROUP BY unit`]);
``` 


# Production aquacole europ√©enne üöÄ

<!-- Liste des pays -->

```js
const list_geo_extract = extractColumns(list_geo);
const codes_geo = list_geo_extract["CODE"];
const labels_geo = list_geo_extract["Label - French"];
const geoOptions = codes_geo
.map((code, index) => ({
  value: code,
  label: `${code} - ${labels_geo[index]}`
}))
.filter(item => tab_list_code_geo_dans_data["geo"].includes(item.value))
.sort((a, b) => {
    const aStartsWithEU = a.value.startsWith("EU");
    const bStartsWithEU = b.value.startsWith("EU");

    // Place 'EU' codes first
    if (aStartsWithEU && !bStartsWithEU) return -1;
    if (!aStartsWithEU && bStartsWithEU) return 1;

    // If both are the same type (both EU or both not EU), sort alphabetically
    return a.value.localeCompare(b.value);

  });
```
<!-- Liste des esp√®ces -->

```js
const list_espece_extract = extractColumns(list_espece);
const codes_espece = list_espece_extract["CODE"];
const labels_espece = list_espece_extract["Label - French"];
const especeOptions = codes_espece
.map((code, index) => ({
  value: code,
  label: `${code} - ${labels_espece[index]}`
}))
.filter(item => tab_list_code_espece_dans_data["species"].includes(item.value)).sort((a, b) => {
    const regexFNumber = /^F\d/;
    const aStartsWithFNumber = regexFNumber.test(a.value);
    const bStartsWithFNumber = regexFNumber.test(b.value);

    // Place codes starting with 'F' followed by a number first
    if (aStartsWithFNumber && !bStartsWithFNumber) return -1;
    if (!aStartsWithFNumber && bStartsWithFNumber) return 1;

    // If both are the same type (both F followed by a number or neither), sort alphabetically
    return a.value.localeCompare(b.value);
  });
```
<!-- Liste des ann√©es -->

```js
function convertirEnVarchar(tableau) {
    return tableau.map((valeur) => valeur.toString());
};
const list_annee_extract = convertirEnVarchar(extractColumns(list_annee)["TIME_PERIOD"].sort());
const dateJour = new Date();
const annee_precedente   = (dateJour.getUTCFullYear() - 2).toString(); 
```

<!-- affichage des listes -->
```js
const choix_list_espece = view(Inputs.select(especeOptions, { label: "Liste des esp√®ces", format: d => d.label }));
const choix_list_geo = view(Inputs.select(geoOptions, { label: "Liste des pays", format: d => d.label }));
const choix_list_annee = view(Inputs.select(list_annee_extract, { label: "Choix de l'ann√©e", value: annee_precedente}));
```

<!-- Cards with big numbers -->

```js
const columns = extractColumns(data_europe_complet);
const isDataEmpty = columns["tot"].length === 0 || columns["tot"].every(value => value === 0 || value === null);

const formatValue = (index) => {
  if (isDataEmpty) return "--";
  
  let unit = columns["unit"][index];
  let valeur = columns["tot"][index];
  if (unit === "TLW"){
    unit = "Tonnes";
    valeur = parseFloat(valeur).toFixed(1);
  };
  if (unit === "EUR"){
    unit = "‚Ç¨";
    valeur = parseFloat(valeur).toFixed(1);
  };
  if (unit === "EUR_T"){
    unit = "‚Ç¨/kg";
    valeur = parseFloat(valeur/1000).toFixed(2);
  }; 

  valeur = parseFloat(valeur).toLocaleString("fr-FR");

  return valeur + " " + unit;
};

const valeur_tot = formatValue(0);
const pu_tot = formatValue(1);
const volume_tot = formatValue(2);
```
<div class="grid grid-cols-3">

<!-- Card Volume -->
  <div class="card">

## Volume üõí
  <span class="big">${volume_tot}</span>
  </div>

<!-- Card Valeur -->
  <div class="card">

## Valeur  üí∞
  <span class="big">${valeur_tot}</span>
  </div>
  
<!-- Card Prix moyen -->

  <div class="card">

## Prix moyen üè∑Ô∏è
  <span class="big">${pu_tot}</span>
  </div>
</div>



<!--Carte de la production par pays-->

```js
const espece_choisie = await sql([`SELECT "Label - French" 
                                FROM data_espece
                                WHERE CODE = '${[choix_list_espece.value]}'`]);
``` 
```js
const tab_list_code_geo_dans_data = extractColumns(list_code_geo_dans_data);
const tab_list_code_espece_dans_data = extractColumns(list_code_espece_dans_data);
```

```js
const espece_choisie_extract = extractColumns(espece_choisie);
const libelle_espece_choisie = espece_choisie_extract["Label - French"];
```

```sql id=data_europe_espece 
SELECT geo, sum(OBS_VALUE) as tot, unit 
FROM allData
WHERE species = ${choix_list_espece.value}
  AND TIME_PERIOD = ${choix_list_annee}
  AND aquaenv = 'TOTAL'
  AND fishreg = '0'
  AND aquameth = 'TOTAL'
  AND unit = 'EUR'
  AND geo NOT IN ('EU', 'EU28', 'EU27_2020')
GROUP BY unit, geo
``` 

```js
const dataEurope = Plot.plot({
  y: {
    grid: true  },
  marks: [
    Plot.ruleY([0]),
    Plot.barY(data_europe_espece, {x: "geo", y: "tot", sort: {x: "y", reverse: true}})
  ]
});


display(dataEurope);

``` 

```js
const fond_carte_europe = FileAttachment("data/CNTR_RG_20M_2020_4326.json").json();
```
```js
const europe = topojson.feature(fond_carte_europe, fond_carte_europe.objects.CNTR_RG_20M_2020_4326);
```
```js
const plot_carte = Plot.plot({

  marks: [
    Plot.geo(europe, {strokeWidth: 0.5})
  ]
})
```


## Carte de *${libelle_espece_choisie}* en *${choix_list_annee}*
<div class="grid grid-cols-1">
${plot_carte}

</div>